# A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings,
# and + represents string concatenation.
# For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
# A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B,
# with A and B nonempty valid parentheses strings.
# Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are
# primitive valid parentheses strings.
# Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.


class Solution(object):
    def removeOuterParentheses(self, s):
        """
        :type s: str
        :rtype: str
        """
        count = 0
        stack = []
        for i in s:
            if i == '(' and count > 0:
                stack.append(i)
            if i == ')' and count > 1:
                stack.append(i)
            count += 1 if i == '(' else -1

        return "".join(stack)

# Сложность: O(n)
# Пояснение к решению:
# Задаются счетчик и пустой список.
# Для каждого элемента данной строки S: если скобка открывается и значение счетчика больше нуля => пополняем список и увеличиваем счетчик на 1, 
# если скобка закрывается и счетчик больше 1 => тоже пополняем список. 
# Из функции фозвращается пустая строка, которая заполнена значениями из списка.
